# .coveragerc to control coverage.py
[run]
branch = True
source =
    ht.events.callbacks
    ht.events.event
    ht.events.group
    ht.events.item
    ht.events.manager
    ht.events.stats
    ht.events.events.rop_render
    ht.events.events.scene_load
    ht.inline.api
    ht.logger
    ht.loggers.shellio
    ht.nodes.styles.event
    ht.nodes.styles.styles
    ht.nodes.styles.manager
    ht.pyfilter.manager
    ht.pyfilter.property
    ht.pyfilter.utils
    ht.pyfilter.operations.deepimage
    ht.pyfilter.operations.ipoverrides
    ht.pyfilter.operations.logoutput
    ht.pyfilter.operations.operation
    ht.pyfilter.operations.primaryimage
    ht.pyfilter.operations.setproperties
    ht.pyfilter.operations.settilecallback
    ht.pyfilter.operations.zdepth
    ht.sohohooks.aovs.aov
    ht.sohohooks.aovs.manager

omit =
        *tests*
        *__init__*

[report]
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:

ignore_errors = True

[html]
directory = coverage_html_report
