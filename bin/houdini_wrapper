#!/usr/bin/python
"""Launch Houdini related applications."""

# =============================================================================
# IMPORTS
# =============================================================================

# Standard Library Imports
import os
import signal
import sys

# Houdini Toolbox Imports
import ht.houdini.wrapper

# =============================================================================
# GLOBALS
# =============================================================================

# Signals we want to handle and their names.
SIGNALS = {
    signal.SIGHUP: "HUP",
    signal.SIGINT: "INT",
    signal.SIGQUIT: "QUIT",
    signal.SIGTERM: "TERM"
}

# =============================================================================
# NON-PUBLIC FUNCTIONS
# =============================================================================

def _handler(signal_num, frame):
    """Signal handler to catch incoming signals and kill the process group.

    This allows things like the Render Scheduler to kill Mantra renders.

    """
    signal_name = SIGNALS[signal_num]
    print "Houdini wrapper caught sig SIG{}".format(signal_name)

    # Ignore further signals.
    for sig in SIGNALS:
        signal.signal(sig, signal.SIG_DFL)

    # Get the current process group id.
    gid = os.getpgid(0)

    # Kill all the processes in the group.
    os.killpg(gid, 15)

    # Exit with non-default status.
    sys.exit(1)

# =============================================================================
# FUNCTIONS
# =============================================================================

def main():
    """Main function."""
    # Handle specified signals.
    for sig in SIGNALS:
        signal.signal(sig, _handler)

    # Construct and run the wrapper object.
    ht.houdini.wrapper.HoudiniWrapper()

# =============================================================================

if __name__ == "__main__":
    main()

